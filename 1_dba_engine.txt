
###
### mongod
###

https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod

ps -ef | grep mongo
ps -ef | grep mongod
ps -ef | grep mongos

kill <pid>
killall mongod

mongod
(1 per server in cluster)

defaults

port :27017
dbpath /data/db
bind_ip localhost
auth disabled

use admin
db.shutdownServer()

mongod --options
--help
--dbpath
--port
--auth
--bind_ip
--logpath
--fork (run as daemon)
--replSet
--keyFile
--sslMode
--sslPEMkey
--sslCAkey

mongod --config /etc/mongod.conf


###
### File Structure on a MongoDB server
###

/data/db
WiredTiger, WiredTiger.lock, etc (WT storage engine)
collection___.wt : COLLECTION DATA
index____.wt : INDEX DATA
mongod.lock : empty if mongod not running. prevents multiple processes...

/data/db/journal
WiredTiger journal entries
WT can look at journal/checkpoints to resume operations interrupted by a mongod process crash

/tmp/mongodb-27017.sock (socket for mongod to own port 27017


###
### Basic Commands
###

db.__() : wrap commands that interact with DB
rs.__() : wrap commands that control replica set deployment/management
sh.__() : wrap commands that control sharded cluster deployment/management

db.<collection>.__() : collection level operations

USER MGMT
db.getUsers()
db.createUser()
db.dropUser()

COLLECTION MGMT
db.renameCollection()
db.collection.createIndex()
db.collection.drop()

DB MGMT
db.dropDatabase()
db.createCollection()

DB STATUS
db.serverStatus()

DATABASE COMMANDS VS SHELL HELPERS
db.runCommand(db command...very verbose)
Shell Helpers are shortcuts!

db.runCommand({ <command> })
db.commandHelp("<command>")

Shell helpers are only availabe in the shell.  DB commands may be necessary from use in a Driver, eg C# driver.


###
### LOGGING BASICS
###

Process Log: collects activity into several components ... access, command, control, index, rollback, repl, journal, write, etc

db.getLogComponents()
verbosity: 0 = informational messages 1-5 = increase to include debug messages -1 = inherit from parent

db.adminCommand({"getLog": "global"})
db.setLogLevel(0, "index")

tail -f /var/log/mongodb/mongod.log ==> LOG ENTRY SYNTAX ... timestamp, severity level, component, connection, ......

Severity level of messages: F fatal E error W warning I informational D debug (1-5)


###
### DB PROFILING
###

System.Profile collection
-CRUD,admin,config operations

Levels: 0 off, 1 on for slow ops (>100ms, or slowms value), 2 on for all operations (2 is dangerous, for heavy profiling load.)

db.getProfilingLevel()
db.setProfilingLevel(1)
show collections
>> system.profile

db.setProfilingLevel(1, {slowms: 0}) // everything will be profiled .. > slowms which is 0

db.newcollection.insert({"a": 1})
db.system.profile.find().pretty()

db.newcollection.find({"a": 1})
db.system.profile.find().pretty()

execStats.stage:COLLSCAN ... full Collection Scan

###
### BASIC SECURITY 
###

Authentication (identity) - client must provide valid credentials
Authorization (privileges of a user)

Client Auth mechanisms
  SCRAM (salted challenge response auth mech) - basic Password security
  X.509 (auth cert)
  LDAP (MongoDB enterprise) - lighweight directory access protocol - MS AD is built on LDAP
  KERBEROS : MIT designed auth system
  
Intra-cluster Auth mechanisms (for replica sets and/or sharding?)

AUTHORIZATION
role-based access control

User > Roles > Privileges (Actions, and Resources that actions apply to)

localhost exception, lets you create a user with auth enabled

mongo --host 127.0.0.1:27017 --username root --password root --authenticationDatabase admin


###
### MONGODB ROLES
###

Role => a set of privileges
Privelege => actions that can be performed on a resource
Resourcee => specific DB specific collection, all DB all collections, any DB specific collection, specific DB any collection, cluster resource

Role can inherit from one or several roles

Network restrictions can be config'd at Role level.  clientSource-serverAddress pairs

BUILT-IN ROLES PER DATABASE

DB User
  read
  readWrite
DB Admin
  dbAdmin
  userAdmin
  dbOwner
Cluster Admin
  clusterAdmin
  clusterManager
  clusterMonitor
  hostManager
Backup/Restore
  backup
  restore
Super User
  root

BUILT IN ROLES FOR ALL DATABASES  
 
 DB User
  readAnyDatabase
  readWriteAnyDatabase
  
DB Admin
  dbAdminAnyDatabase
  userAdminAnyDatabase
Super User
  root

###
### DBA
###

https://docs.mongodb.com/manual/administration/

https://docs.mongodb.com/database-tools/

https://docs.mongodb.com/manual/reference/command/nav-administration/

https://docs.mongodb.com/manual/replication/

https://docs.mongodb.com/manual/sharding/

https://studio3t.com/knowledge-base/articles/mongodb-advantages-use-cases/

https://studio3t.com/knowledge-base/articles/copy-mongodb-databases-across-connections/

https://docs.mongodb.com/compass/master/schema/

###
### ENGINE
###

https://docs.mongodb.com/manual/changeStreams/
