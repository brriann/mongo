https://docs.mongodb.com/manual/meta/aggregation-quick-reference/

###
### $match - FILTERING DOCUMENTS
###

-$match should come as early as possible, and can be used multiple times in an aggregation pipeline
-$match uses standard MongoDB query operators
  -no $where.  $text only allowed at first stage of aggregation pipeline
-$match in the first stage, can take advantage of INDEXES.  SO, $MATCH = FIRST STAGE!!!
-$match does not allow projection.  
-$match is a FILTER, not a find

db.coll.aggregate([{ $match: {} }])

###
### $project - SHAPING DOCUMENTS
###

-$project is like a find projection, and much more. remove/retain fields, reassign fields, combine into new fields
-$project is like a map function - higher order function that transforms a collection

db.coll.aggregate([{ $project: {...} }])
db.coll.aggregate([{ $project: {_id: 0, name: 1} }]) // REMOVE or RETAIN, just like projection in a find
db.coll.aggregate([{ $project: {_id: 0, name: 1, "field.subfieldOnly": 1} }])

db.coll.aggregate([{ $project: {_id: 0, name: 1, field: "$field.subfieldOnly"} }]) // REASSIGN SUBFIELD TO FIELD NAME (field path expression)

db.coll.aggregate([{ $project: {_id: 0, name: 1, newFieldName: "$field.subfieldOnly"} }]) // CREATE NEW FIELD TO HOUSE THE SUBFIELD

db.coll.aggregate([{ $project: {_id: 0, name: 1, resultOfMath: { $multiply: [ {$divide: ["$field.subfieldOnly", 25]},
                                                                             77 ]}}
}]) // math operators on a field path expression, reassigned to new field

$MAP, $MATCH AND $PROJECT WITH ARRAYS

{ $match: { arrayField: { $elemMatch: { $exists: true } } } // CHECK IF FIELD IS AN ARRAY, AND IS NOT EMPTY

arrayField: { $map: { input: "$arrayField", as: "arrayElt", in: { $arrayElemAt: [ { $split: ["$$arrayElt", "i"] }, 0 ] } } } // map function over each array field element ... split at the char "i" and take the 0th portion


###
### $addFields - SIMILAR TO PROJECT ... MODIFY INCOMING PIPELINE DOCUMENTS WITH NEW COMPUTED FIELDS, OR CHANGE EXISTING FIELDS
###

-$project can be tedious in specifying lots of fields which you want to keep
-$addFields can perform transformations/add new fields, without stripping other non-explicitly retained fields
db.coll.aggregate([
{ $project: {_id: 0, name: 1, gravity: 1, mass: 1} },
{ $addFields: { gravity: "$gravity.value", mass: "$mass.value" } } ]) // RETAIN FIELDS WITH $PROJECT, THEN TRANSFORM WITH $ADDFIELDS

###
### $geoNear - for working with geoJSON data
###

###
### $sort, $skip, $limit, $count - Cursor-like stages
###

Cursor equivalents:

find().count()
find().skip(5)
find().limit(5)
find().sort({someField: -1}) // .sort({firstBy: 1, thenBy: -1})

$limit: {integer}
$skip: {integer}
$count: {<name what the count should be called>} 
$sort: {<fieldToSortOn>: <integer for sort direction>}

-$count counts all incoming documents to the pipeline stage
-$count's count is an END RESULT of an aggregation pipeline

-$sort: {firstBy: -1, thenBy: 1} // CAN SORT BY MULTIPLE FIELDS, JUST AS IN A CURSOR

-$sort, if early in the pipeline, and BEFORE a $project, can take advantage of INDEXES
-otherwise, $sort is in-memory, and greatly increases memory usage.
-pipeline option { allowDiskUse: true } helps us use DISK as well as RAM to perform SORTS

###
### $sample - selects a set of random documents from a collection
###

1st way: { $sample: <size N, # documents> }
-WHEN N <= 5% of total documents #, AND source collection has >=- 100 documents AND $sample is first stage
--a pseudorandom cursor selects N documents to be passed on
-ELSE
--an in-memory random sort happens, and N documents are selected


###
### $group
###

{$group: {_id: <match/group criteria> } }
{$group: {_id: $fieldNameIWantToGroupBy } }

this outputs:

{"_id": 2017}
{"_id": 2018}
{"_id": 2019}
...
if grouping by a year field.

-grouping by just one equivalent is the same as a "distinct" command

{$group: {_id: fieldNameToGroupBy,
  fieldName: <accumulatorExpression1>,
  fieldName: <accumulatorExpression2>,
  ...
} }

{$group: {_id: "$year",
  numFilmsInYear: {$sum: 1}, //each matching document sums +=1 to the numFilmsInYear aggregation field.
  averageReview: {$avg: "$imdbRating"} // $avg average operator
} }

// grouping by a year field. getting the count of films in that year.  and sorting by the count field in another stage

{$group: {_id: "$year",
  numFilmsInYear: {$sum: 1} //each matching document sums +=1 to the numFilmsInYear aggregation field.
} },
{sort: { numFilmsInYear: -1 }}

{ $group: _id: {numOfArrayElts: {$cond: [{$isArray: "$arrayField"}, {$size: "$arrayField"}, 0]}} } // $cond = ternary statement ... either array field size, or 0

{$group: {_id: null}} // GROUP BY NULL OR '' ID GROUPS ALL DOCUMENTS. THERE IS NO MATCH/SUBSET BUCKETING

// use case: get an average value for all documents meeting an intitial $match stage

db.movies.aggregate([
{$match:{rating: {$gte: 0}}},
{$group: {_id: null, averateRaiting: { $avg: "$rating" }}}
])

Takeaways:
_id is essentially GROUP BY ___
$group can accept all accumulator expressions
$group can be used multiple times within a pipeline





###
###
###


###
###
###
